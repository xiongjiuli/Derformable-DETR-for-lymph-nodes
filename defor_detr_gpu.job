#!/bin/bash
#SBATCH --job-name=deformable_detr
#SBATCH --partition=bme_gpu 
#SBATCH --output=./logs/%j_gpu_out.out
#SBATCH --error=./logs/%j_gpu_err.out
#SBATCH -N 1
#SBATCH -n 4   
#SBATCH --mem 20G
#SBATCH --gres=gpu:TeslaV100S-PCIE-32GB:1
#SBATCH -t 48:00:00
 


echo ${SLURM_JOB_NODELIST}$
echo start on $(data)

# export CUDA_HOME="/public/home/xiongjl2022/anaconda3/pkgs/cuda-nvcc-11.6.124-hbba6d2d_0" # change to your path
# export CUDA_TOOLKIT_ROOT_DIR=$CUDA_HOME
# export LD_LIBRARY_PATH="$CUDA_HOME/extras/CUPTI/lib64:$LD_LIBRARY_PATH"
# export LIBRARY_PATH=$CUDA_HOME/lib64:$LIBRARY_PATH
# export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
# export CFLAGS="-I$CUDA_HOME/include $CFLAGS"

# cd ./models/ops
# sh ./make.sh
# # unit test (should see all checking is True)
# python test.py

# python /public_bme/data/xiongjl/Deformable-DETR_data/lymph2coco.py

## training 
# GPUS_PER_NODE=1 ./tools/run_dist_launch.sh 1 ./configs/r50_deformable_detr.sh 

## eval
# /public_bme/data/xiongjl/Deformable-DETR_public/configs/r50_deformable_detr.sh --resume /public_bme/data/xiongjl/Deformable-DETR_data_public/outputs/checkpoint.pth --eval

# python /public_bme/data/xiongjl/Deformable-DETR_public/inference.py

echo end !!!!